#include <stdio.h>
#include <string.h>
 
int max(int a, int b) { return (a > b) ? a : b; }
 
int lcs(char* X, char* Y, int m, int n)
{
    if (m == 0 || n == 0)
        return 0;
    if (X[m - 1] == Y[n - 1])
        return 1 + lcs(X, Y, m - 1, n - 1);
    else
        return max(lcs(X, Y, m, n - 1),
                   lcs(X, Y, m - 1, n));
}
 
int main()
{
    char X[] = "AGGTAB";
    char Y[] = "GXTXAYB";
 
    int m = strlen(X);
    int n = strlen(Y);
 
    int length = lcs(X, Y, m, n);
    printf("Length of LCS: %d\n", length);
 
    return 0;
}

Time Complexity: O(n * 2n)

Let us count the total subsequences with lengths 1, 2, . . . , n-1, n.
From theory of permutation and combination we know number of combinations with 1 element is nC1. Number of combinations with 2 elements are nC2 and so on. 
So a string of length n has nC1 + nC2 + . . . nCn = 2n-1 different possible subsequences.
Each subsequence takes O(n) time to compare.
Auxiliary Space: O(n) As we can reuse the same string.
