#include <bits/stdc++.h>
 
using namespace std;
 
int count(int coins[], int n, int sum)
{
    int i, j, x, y;
 
    // We need sum+1 rows as the table
    // is constructed in bottom up
    // manner using the base case 0
    // value case (sum = 0)
    int table[sum + 1][n];
 
    // Fill the entries for 0
    // value case (sum = 0)
    for (i = 0; i < n; i++)
        table[0][i] = 1;
 
    // Fill rest of the table entries
    // in bottom up manner
    for (i = 1; i < sum + 1; i++) {
        for (j = 0; j < n; j++) {
            // Count of solutions including coins[j]
            x = (i - coins[j] >= 0) ? table[i - coins[j]][j]
                                    : 0;
 
            // Count of solutions excluding coins[j]
            y = (j >= 1) ? table[i][j - 1] : 0;
 
            // total count
            table[i][j] = x + y;
        }
    }
    return table[sum][n - 1];
}
 
// Driver Code
int main()
{
    int coins[] = { 1, 2, 3 };
    int n = sizeof(coins) / sizeof(coins[0]);
    int sum = 4;
    cout << count(coins, n, sum);
    return 0;
}

Time Complexity: O(M*sum)
Auxiliary Space: O(M*sum) 

The time complexity of this implementation is O(N * C), where N is the target value and C is the number of coins. 
This is because we have two nested loops: one that iterates through each coin, and another that iterates through each value up to N.

The space complexity is O(N), as we are creating a vector to hold the number of ways to make each value up to N.
The size of the vector is N+1, so the space complexity is O(N).
