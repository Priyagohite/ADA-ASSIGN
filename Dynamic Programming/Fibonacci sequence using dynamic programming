#include<iostream>
using namespace std;
 
int fibonacci(int n)
{
    int F[n+1];
 
    F[0]=0;
    F[1]=1;
 
    for(int i=2;i<=n;i++)
        F[i]=F[i-1]+F[i-2];
 
    return F[n];
}
 
int main()
{
    int n;
    cout<<"Enter the value of n"<<endl;
    cin>>n;
 
    cout<<"Required fibonacci number is ";
    cout<<fibonacci(n);
 
    cout<<endl;
    return 0;
   }
Analysis of the recursive Fibonacci program:
We know that the recursive equation for Fibonacci is T(n)=T(n-1)+T(n-2)+O(1).
What this means is, the time taken to calculate fib(n) is equal to the sum of time taken to calculate fib(n-1) and fib(n-2). This also includes the constant time to perform the previous addition.

On solving the above recursive equation we get the upper bound of Fibonacci as O(2^n) but this is not the tight upper bound. The fact that Fibonacci can be mathematically represented as a linear recursive function can be used to find the tight upper bound.
Now Fibonacci is defined as
F(n) = F(n-1)+F(n-2)

The characteristic equation for this function will be
x^2 = x+1
x^2 – x–1 = 0

Solving this by quadratic formula we can get the roots as
x = (1+\sqrt{5})/2 and x=(1 – \sqrt{5})/2

Now we know that solution of a linear recursive function is given as
F(n) = ($\alpha_1)^n + ($\alpha_2)^n

where $\alpha_1 and $\alpha_2 are the roots of the characteristic equation.
So for our Fibonacci function F(n) = F(n-1)+F(n-2) the solution will be

F(n) = ((1+$\sqrt{5})/2)^n+((1-\sqrt{5})/2)^n
Clearly T(n) and F(n) are asymptotically the same as both functions are representing the same thing.
Hence it can be said that
T(n) = O(((1+$\sqrt{5})/2)^n+((1-\sqrt{5})/2)^n)
or we can write below (using the property of Big O notation that we can drop lower order terms)
T(n) = O(((1+$\sqrt{5})/2)^n
T(n) = O(1.6180)^n
This is the tight upper bound of fibonacci.
