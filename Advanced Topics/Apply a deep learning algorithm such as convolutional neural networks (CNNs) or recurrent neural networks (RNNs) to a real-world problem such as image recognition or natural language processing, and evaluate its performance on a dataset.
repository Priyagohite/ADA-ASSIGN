Sure, I can provide an example of how CNNs can be used for image recognition.

The problem we'll tackle is to classify images of hand-written digits into their corresponding numbers (0-9). We'll use the famous MNIST dataset, which contains 60,000 training images and 10,000 test images.

First, we'll import the necessary libraries and load the dataset:

//javascript

import tensorflow as tf
from tensorflow import keras

(X_train, y_train), (X_test, y_test) = keras.datasets.mnist.load_data()
Next, we'll preprocess the data by normalizing the pixel values to be between 0 and 1, and reshaping the images to be 28x28x1 (since they are grayscale):

makefile
Copy code
X_train = X_train.reshape(-1, 28, 28, 1) / 255.0
X_test = X_test.reshape(-1, 28, 28, 1) / 255.0
Now, we'll define and train the CNN:

//less

model = keras.Sequential([
    keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation='relu', input_shape=(28,28,1)),
    keras.layers.MaxPooling2D(pool_size=(2,2)),
    keras.layers.Flatten(),
    keras.layers.Dense(units=10, activation='softmax')
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

model.fit(X_train, y_train, epochs=5, validation_data=(X_test, y_test))
This CNN consists of a convolutional layer, a max pooling layer, and a fully connected layer with a softmax activation function. We train it using the Adam optimizer and sparse categorical crossentropy loss, and evaluate its accuracy on the test set.

After training, we can evaluate the model's accuracy on the test set:

//scss

test_loss, test_acc = model.evaluate(X_test, y_test)
print('Test accuracy:', test_acc)
For this problem, we can achieve an accuracy of over 99% with this simple CNN architecture.

This is just one example of how CNNs can be used for image recognition. RNNs can be used for tasks such as natural language processing, where they can be used for tasks such as text classification, machine translation, and speech recognition.
