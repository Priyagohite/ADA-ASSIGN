#include<bits/stdc++.h>
using namespace std;
  
// This function returns the Approximate Median
int randApproxMedian(int arr[],int n)
{
    // Declaration for the random number generator
    random_device rand_dev;
    mt19937 generator(rand_dev());
  
    // Random number generated will be in the range [0,n-1]
    uniform_int_distribution<int> distribution(0, n-1);
  
    if (n==0)
        return 0;
  
    int k = 10*log2(n); // Taking c as 10
  
    // A set stores unique elements in sorted order
    set<int> s;
    for (int i=0; i<k; i++)
    {
        // Generating a random index
        int index = distribution(generator);
  
        //Inserting into the set
        s.insert(arr[index]);
    }
  
    set<int> ::iterator itr = s.begin();
  
    // Report the median of the set at k/2 position
    // Move the itr to k/2th position
    advance(itr, (s.size()/2) - 1);
  
    // Return the median
    return *itr;
}
  
// Driver method to test above method
int main()
{
    int arr[] = {1, 3, 2, 4, 5, 6, 8, 7};
    int n = sizeof(arr)/sizeof(int);
    printf("Approximate Median is %d\n",randApproxMedian(arr,n));
    return 0
}


The k-Median Problem is a well-known optimization problem in computer science, where the goal is to find a set of k points from a given set of points that minimize the sum of distances between each point in the input set and its nearest point in the selected set. This problem has important applications in clustering and facility location.

A simple randomized algorithm for the k-Median Problem is as follows:

Randomly select k points from the input set as the initial centers.
Repeat until convergence:
a. Assign each input point to its nearest center.
b. Update the centers to be the median of the assigned points.
This algorithm has a number of desirable properties:

The expected running time is O(nk log n), where n is the size of the input set. This is because each iteration involves assigning each point to its nearest center, which takes O(kn) time, and updating the centers, which takes O(kn log n) time.
The approximation ratio of this algorithm is at most 3. This means that the cost of the solution produced by the algorithm is at most three times the optimal cost. The proof of this result relies on the fact that the sum of distances between each point and its nearest center is at most three times the sum of distances between each point and its optimal center.
Overall, the k-Median Problem is a challenging problem in optimization, but this randomized algorithm provides a practical and efficient way to obtain a high-quality solution in practice.
